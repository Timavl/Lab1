import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';

const API_URL = '/api/items';

function App() {
  const [items, setItems] = useState([]);
  const [selectedItem, setSelectedItem] = useState(null);
  const [formData, setFormData] = useState({ name: '', description: '', price: '' });
  const [isEditing, setIsEditing] = useState(false);
  const [activeView, setActiveView] = useState('list');
  const [loading, setLoading] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const fetchItems = async () => {
    setLoading(true);
    try {
      const response = await axios.get(API_URL);
      setItems(response.data.data);
    } catch (error) {
      console.error('Error fetching items:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ ID
  const fetchItemById = async (id) => {
    setLoading(true);
    try {
      const response = await axios.get(`${API_URL}/${id}`);
      setSelectedItem(response.data.data);
      setActiveView('details');
    } catch (error) {
      console.error('Error fetching item:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞');
    } finally {
      setLoading(false);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
  const createItem = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      await axios.post(API_URL, formData);
      setFormData({ name: '', description: '', price: '' });
      fetchItems();
      setActiveView('list');
      alert('–≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    } catch (error) {
      console.error('Error creating item:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞');
    } finally {
      setLoading(false);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
  const updateItem = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      await axios.put(`${API_URL}/${selectedItem.id}`, formData);
      setFormData({ name: '', description: '', price: '' });
      setSelectedItem(null);
      setIsEditing(false);
      fetchItems();
      setActiveView('list');
      alert('–≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    } catch (error) {
      console.error('Error updating item:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞');
    } finally {
      setLoading(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
  const deleteItem = async (id) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç?')) {
      setLoading(true);
      try {
        await axios.delete(`${API_URL}/${id}`);
        fetchItems();
        if (selectedItem && selectedItem.id === id) {
          setSelectedItem(null);
          setActiveView('list');
        }
        alert('–≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
      } catch (error) {
        console.error('Error deleting item:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞');
      } finally {
        setLoading(false);
      }
    }
  };

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleEdit = (item) => {
    setSelectedItem(item);
    setFormData({
      name: item.name,
      description: item.description || '',
      price: item.price
    });
    setIsEditing(true);
    setActiveView('form');
  };

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É
  const handleCancel = () => {
    setFormData({ name: '', description: '', price: '' });
    setSelectedItem(null);
    setIsEditing(false);
    setActiveView('list');
  };

  useEffect(() => {
    fetchItems();
  }, []);

  return (
    <div className="App">
      {/* –ö—Ä–∞—Å–∏–≤—ã–π —Ö–µ–¥–µ—Ä —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º */}
      <header className="app-header">
        <div className="header-content">
          <div className="logo">
            <div className="logo-icon">üì¶</div>
            <div>
              <h1>Inventory Manager</h1>
              <p>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏</p>
            </div>
          </div>
          
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Ç–µ–ø–µ—Ä—å –≤—ã—à–µ –∏ –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–∞—è */}
          <div className="header-stats">
            <div className="stat-card">
              <div className="stat-icon total-icon"></div>
              <div className="stat-info">
                <span className="stat-number">{items.length}</span>
                <span className="stat-label">–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤</span>
              </div>
            </div>
            <div className="stat-card">
              <div className="stat-icon price-icon"></div>
              <div className="stat-info">
                <span className="stat-number">
                  {items.reduce((sum, item) => sum + parseFloat(item.price), 0).toFixed(2)} ‚ÇΩ
                </span>
                <span className="stat-label">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</span>
              </div>
            </div>
          </div>
        </div>
        
        {/* –í–æ–ª–Ω–æ–≤–æ–π –¥–∏–∑–∞–π–Ω */}
        <div className="wave"></div>
      </header>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <nav className="navigation">
        <button 
          className={`nav-btn ${activeView === 'list' ? 'active' : ''}`}
          onClick={() => setActiveView('list')}
        >
          <span className="btn-icon list-icon"></span>
          –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
          {items.length > 0 && <span className="badge">{items.length}</span>}
        </button>
        <button 
          className={`nav-btn ${activeView === 'form' ? 'active' : ''}`}
          onClick={() => {
            setFormData({ name: '', description: '', price: '' });
            setIsEditing(false);
            setActiveView('form');
          }}
        >
          <span className="btn-icon add-icon"></span>
          –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
        </button>
        <button 
          className={`nav-btn ${activeView === 'details' ? 'active' : ''}`}
          onClick={() => selectedItem ? setActiveView('details') : setActiveView('list')}
          disabled={!selectedItem}
        >
          <span className="btn-icon details-icon"></span>
          –î–µ—Ç–∞–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
        </button>
      </nav>

      <main className="main-content">
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {loading && (
          <div className="loading-overlay">
            <div className="spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        )}

        {/* –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
        {activeView === 'list' && (
          <div className="items-list">
            <div className="section-header">
              <h2>–°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤</h2>
              <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤</p>
            </div>
            
            {items.length === 0 ? (
              <div className="empty-state">
                <div className="empty-icon"></div>
                <h3>–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É</p>
                <button 
                  className="btn-primary"
                  onClick={() => setActiveView('form')}
                >
                  –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
                </button>
              </div>
            ) : (
              <div className="items-grid">
                {items.map(item => (
                  <div key={item.id} className="item-card">
                    <div className="card-header">
                      <h3>{item.name}</h3>
                      <span className="price-tag">{parseFloat(item.price).toFixed(2)} ‚ÇΩ</span>
                    </div>
                    
                    <div className="card-body">
                      <p className="description">
                        {item.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                      </p>
                      <div className="item-meta">
                        <span className="meta-item">ID: {item.id}</span>
                        <span className="meta-item">
                          –û–±–Ω–æ–≤–ª–µ–Ω: {new Date(item.updated_at).toLocaleDateString()}
                        </span>
                      </div>
                    </div>

                    <div className="card-actions">
                      <button 
                        onClick={() => fetchItemById(item.id)} 
                        className="btn-action btn-view"
                        title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏"
                      >
                        <span className="action-icon view-icon"></span>
                        –î–µ—Ç–∞–ª–∏
                      </button>
                      <button 
                        onClick={() => handleEdit(item)} 
                        className="btn-action btn-edit"
                        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                      >
                        <span className="action-icon edit-icon"></span>
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                      </button>
                      <button 
                        onClick={() => deleteItem(item.id)} 
                        className="btn-action btn-delete"
                        title="–£–¥–∞–ª–∏—Ç—å"
                      >
                        <span className="action-icon delete-icon"></span>
                        –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        {activeView === 'form' && (
          <div className="item-form">
            <div className="section-header">
              <h2>{isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç' : '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç'}</h2>
              <p>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç–ª–µ–º–µ–Ω—Ç–µ</p>
            </div>
            
            <form onSubmit={isEditing ? updateItem : createItem}>
              <div className="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞</label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => setFormData({...formData, name: e.target.value})}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞"
                  required
                />
              </div>
              
              <div className="form-group">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                  value={formData.description}
                  onChange={(e) => setFormData({...formData, description: e.target.value})}
                  placeholder="–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                  rows="4"
                />
              </div>
              
              <div className="form-group">
                <label>–¶–µ–Ω–∞ (‚ÇΩ)</label>
                <input
                  type="number"
                  step="0.01"
                  min="0"
                  value={formData.price}
                  onChange={(e) => setFormData({...formData, price: e.target.value})}
                  placeholder="0.00"
                  required
                />
              </div>
              
              <div className="form-actions">
                <button type="submit" className="btn-primary" disabled={loading}>
                  {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : (isEditing ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç')}
                </button>
                <button 
                  type="button" 
                  onClick={handleCancel} 
                  className="btn-secondary"
                  disabled={loading}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </form>
          </div>
        )}

        {/* –î–µ—Ç–∞–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ */}
        {activeView === 'details' && selectedItem && (
          <div className="items-list">
            <div className="section-header">
              <h2>–î–µ—Ç–∞–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞</h2>
              <p>–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ</p>
            </div>
            
            <div className="detail-card">
              <div className="detail-header">
                <h3>{selectedItem.name}</h3>
                <span className="detail-price">{parseFloat(selectedItem.price).toFixed(2)} ‚ÇΩ</span>
              </div>
              
              <div className="detail-content">
                <div className="detail-section">
                  <h4>–û–ø–∏—Å–∞–Ω–∏–µ</h4>
                  <p>{selectedItem.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                </div>
                
                <div className="detail-info">
                  <div className="info-item">
                    <span className="info-label">ID —ç–ª–µ–º–µ–Ω—Ç–∞:</span>
                    <span className="info-value">{selectedItem.id}</span>
                  </div>
                  <div className="info-item">
                    <span className="info-label">–°–æ–∑–¥–∞–Ω:</span>
                    <span className="info-value">{new Date(selectedItem.created_at).toLocaleString()}</span>
                  </div>
                  <div className="info-item">
                    <span className="info-label">–û–±–Ω–æ–≤–ª–µ–Ω:</span>
                    <span className="info-value">{new Date(selectedItem.updated_at).toLocaleString()}</span>
                  </div>
                </div>
              </div>
              
              <div className="detail-actions">
                <button onClick={() => handleEdit(selectedItem)} className="btn-primary">
                  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button onClick={() => deleteItem(selectedItem.id)} className="btn-danger">
                  –£–¥–∞–ª–∏—Ç—å
                </button>
                <button onClick={() => setActiveView('list')} className="btn-secondary">
                  –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
                </button>
              </div>
            </div>
          </div>
        )}
      </main>

      <footer className="app-footer">
        <p>¬© 2025 Inventory Manager | –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏</p>
      </footer>
    </div>
  );
}

export default App;
